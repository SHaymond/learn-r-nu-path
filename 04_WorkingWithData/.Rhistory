View(nhanes_pipe_test)
nhanes_pipe_test <-
nhanes_data_clean %>%
mutate(calc_TfSat = round((100*Fe_ugdL/TIBC_ugdL),1)) %>%
filter(Gender == 2)
View(nhanes_pipe_test)
nhanes_pipe_test <-
nhanes_data_clean %>%
select(Subject, TfSat_pct) %>%
mutate(calc_TfSat = round((100*Fe_ugdL/TIBC_ugdL),1))
nhanes_pipe_test <-
nhanes_data_clean %>%
mutate(calc_TfSat = round((100*Fe_ugdL/TIBC_ugdL),1)) %>%
filter(Gender == 2) %>%
select(Subject, calc_TfSat, TfSat_pct) %>%
arrange(calc_TfSat)
head(nhanes_pipe_test)
# your turn!
im_piping_hot <- nhanes_data_clean %>%
mutate(Analyst = "Shannon") %>%
select(Subject, Fe_ugdL, Age_months, Analyst) %>%
arrange(Fe_ugdL)
View(im_piping_hot)
nhanes_data_clean %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
nhanes_data_clean %>%
group_by(Gender) %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
nhanes_data_clean %>%
group_by(Race_ethn, Gender) %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
## A SOLUTION
nhanes_data_clean %>%
group_by(Gender, Race_ethn) %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
# your turn!
# modify this code
nhanes_data_clean %>%
group_by(Gender, Race_ethn) %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
nhanes_data_clean %>%
group_by(Gender) %>%
select(-Subject, -Age_months, -Resulted_t) %>% #remove other numeric columns
summarize_if(is.numeric, list(mean = mean, med = median))
# your turn!
nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean(TfSat_pct),
sd(TfSat_pct),
n())
# your turn!
nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean = mean(TfSat_pct),
sd = sd(TfSat_pct),
n = n())
# your turn!
nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean_TfSat = mean(TfSat_pct),
sd_TfSat = sd(TfSat_pct),
n_TfSat = n())
# your turn!
nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean_TfSat = mean(TfSat_pct),
sd_TfSat = sd(TfSat_pct),
n_TfSat = n()) %>%
arrange(desc(n_TfSat))
nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean_TfSat = round(mean(TfSat_pct), 2),
sd_TfSat = round(sd(TfSat_pct),2),
n_TfSat = n()) %>%
arrange(desc(n_TfSat))
nhanes_data_clean %>%
group_by(Race_ethn) %>%
select(TfSat_pct) %>%
summarize_if(is.numeric, list(mean = mean,
sd = sd,
n = n)) %>%
arrange(desc(n_TfSat))
nhanes_data_clean %>%
group_by(Race_ethn) %>%
select(TfSat_pct) %>%
summarize_if(is.numeric, list(mean = mean,
sd = sd,
n = tally)) %>%
arrange(desc(n_TfSat))
nhanes_data_clean %>%
group_by(Race_ethn) %>%
select(TfSat_pct) %>%
summarize_if(is.numeric, list(mean = mean,
sd = sd)) %>%
arrange(desc(n_TfSat))
nhanes_data_clean %>%
group_by(Race_ethn) %>%
select(TfSat_pct) %>%
summarize_if(is.numeric, list(mean = mean,
sd = sd))
nhanes_data_clean %>%
group_by(Race_ethn) %>%
select(TfSat_pct)
nhanes_data_clean %>%
group_by(Race_ethn) %>%
select(TfSat_pct) %>%
summarize(mean = mean(), sd = sd())
nhanes_data_clean %>%
group_by(Race_ethn) %>%
select(TfSat_pct) %>%
summarize(mean = mean(TfSat_pct), sd = sd(TfSat_pct))
nhanes_data_clean <- nhanes_data_clean %>%
mutate(MCV_fL = as.numeric(MCV_fL)) # did you see the warning? NAs introduced by coercion
head(is.na(nhanes_data_clean$MCV_fL)) # provides a logical of if every observation is NA or not.
# count how many NAs are in a data set
sum(is.na(nhanes_data_clean$MCV_fL)) # works because TRUE = 1
which(is.na(nhanes_data_clean$MCV_fL)) # what is the output here?
nhanes_data_clean[63, MCV_fl]
nhanes_data_clean[63, "MCV_fl"]
nhanes_data_clean[63, "MCV_fL"]
nhanes_data[63, "MCV_fL"] # quick way to identify the MCV_fL value in the 63rd row. What happened here???
nhanes_data_clean <-
nhanes_data_clean %>%
replace_na(list(MCV_fL = 80))
nhanes_data_clean[63, "MCV_fL"] # check
nhanes_data_clean %>%
group_by(Gender) %>%
select(-Subject, -Age_months, -Resulted_t) %>% #remove other numeric columns
summarize_if(is.numeric, list(mean = mean, med = median)) #success!
nhanes_data_clean[63, MCV_fL] # here it is
nhanes_data_clean[63, "MCV_fL"] # here it is
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::include_graphics("images/tidyverse.png")
knitr::include_graphics("images/Rsyntax.png")
nhanes_data <- read_csv("data/NHANES_FeMarkers_messy.csv")
glimpse(nhanes_data)
# see number of rows and columns, column names and data type - do all make sense?
summary(nhanes_data)
# statistical summary of each column - do all make sense?
# USED ON A VECTOR:
racer <- c("Mario", "Princess Peach", "Wario", "Baby Luigi")
racer[2] # selects 2nd element
racer[4]
racer[3:4] # selects elements 3 and 4
racer[[2]] # same behavior as [ ] for a vector, but this changes for lists
# USED ON A LIST:
mk8_list <- list(racer = c("Mario", "Princess Peach",
"Wario", "Baby Luigi"),
wt = c("middle", "middle", "heavy", "light"),
speed = c(3.75, 3.25, 4.75, 2.25))
one <- mk8_list[1] # returns a list of the first item of the list
one
unnamed_list <- list("a", "b", "c", "d")
unnamed_list[[1]]
mk8_list[2:3] # returns a list of the 2nd and 3rd items in the list
two <- mk8_list[[1]] # returns a vector with the elements of the first item of the list
two
two_alt <- mk8_list$racer # same as two
# notice the difference between one and two in the environment, but that two and two_alt are equivalent
mk8_list$place <- c("second", "third", "fourth", "first") # adds new element to the list
mk8_list
# USED ON A DATAFRAME
# remember a dataframe is a special type of list where all elements are the same length.
mk8_df <- data.frame(racer = c("Mario", "Princess Peach",
"Wario", "Baby Luigi"),
wt = c("middle", "middle", "heavy", "light"),
speed = c(3.75, 3.25, 4.75, 2.25))
# [row, column]
mk8_df[1,1] # returns element in first row, first column [row, column]
mk8_df[ ,2] # returns elements in all rows for the second column
mk8_df$wt # also returns elements in all rows for second column by name
mk8_df[2, ] # returns second row for all columns
mk8_df[[1,2]] # returns element of 1st row, 2nd column
mk8_df[[2]] # returns elements of 2nd column
mk8_df$place <- c("second", "third", "fourth", "first") # adds new column called place
mk8_df
nhanes_data_clean <- mutate(nhanes_data,
Gender = factor(Gender),
Race_ethn = factor(Race_ethn))
#we can change more than one column in a single mutate() call
glimpse(nhanes_data_clean) #fct = factor!
summary(nhanes_data_clean) #look what the summary does now for factors
nhanes_data_demo <- select(nhanes_data_clean,
Subject, Gender, Age_months, Race_ethn)
#see the new object in your environment?
nhanes_data_demo <- select(nhanes_data_demo, -Race_ethn)
#see the change in your environment? can also use -c() to remove several columns
nhanes_data_demo <- select(nhanes_data_demo, -c(Age_months, Gender))
nhanes_fe <- select(nhanes_data_clean, Ft_ngdL:TfSat_pct)
knitr::include_graphics("images/select.png")
# your turn!
nhanes_data_clean_lucy <- select(nhanes_data_clean,
Subject, Fe_ugdL, MCV_fL)
## A SOLUTION
nhanes_clean_subset <- select(nhanes_data_clean, Subject, Fe_ugdL, Ft_ngdL)
knitr::include_graphics("images/filter.png")
nhanes_males <- filter(nhanes_data_clean, Gender == 1)
#does the number of rows match our summary for number of Gender = 1?
nhanes_4y_males <- filter(nhanes_data_clean,
Age_months >= 48 & Age_months < 60,
Gender == 1)
nhanes_4y_or <- filter(nhanes_data_clean,
Age_months >= 48 & Age_months < 60 |
Gender == 1)
nhanes_4y_males_racesubset <-
filter(nhanes_4y_males, Race_ethn %in% c("1", "2", "3"))
races <- c("4", "5")
filter(nhanes_4y_males, Race_ethn %in% races)
nhanes_4y_not_males <- filter(nhanes_data_clean,
Age_months >= 48 & Age_months < 60,
Gender != 1) #does not equal 1
# to use with %in% have to negate entire statement
nhanes_4y_not_males_not_racesubset <-
filter(nhanes_4y_not_males, !(Race_ethn %in% c("1", "2", "3")))
# your turn!
nhanes_data_clean_girls_race <- filter(nhanes_data_clean,
Race_ethn == 3,
Gender == 2)
## A SOLUTION
nhanes_3_females <- filter(nhanes_data_clean, Gender == "2", Race_ethn == "3")
nhanes_sorted <- arrange(nhanes_data_clean, Age_months)
head(nhanes_sorted)
nhanes_sorted_desc <- arrange(nhanes_data_clean, desc(Age_months))
head(nhanes_sorted_desc)
# your turn!
head(arrange(nhanes_data_clean_girls_race, desc(Fe_ugdL)))
head(arrange(nhanes_data_clean_girls_race, Age_months, desc(Fe_ugdL)))
## A SOLUTION
nhanes_3_females_sort <- arrange(nhanes_3_females, desc(Fe_ugdL))
nhanes_pipe_test <-
nhanes_data_clean %>%
mutate(calc_TfSat = round((100*Fe_ugdL/TIBC_ugdL),1)) %>%
filter(Gender == 2) %>%
select(Subject, calc_TfSat, TfSat_pct) %>%
arrange(calc_TfSat)
head(nhanes_pipe_test)
# your turn!
im_piping_hot <- nhanes_data_clean %>%
mutate(Analyst = "Shannon") %>%
select(Subject, Fe_ugdL, Age_months, Analyst) %>%
arrange(Fe_ugdL)
## A SOLUTION
im_piping_hot <-
nhanes_data_clean %>%
mutate(Analyst = "Shannon") %>%
select(Subject, Fe_ugdL, Age_months, Analyst) %>%
arrange(Fe_ugdL)
nhanes_data_clean %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
nhanes_data_clean %>%
group_by(Gender) %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
nhanes_data_clean %>%
group_by(Race_ethn, Gender) %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
# your turn!
# modify this code
nhanes_data_clean %>%
group_by(Gender, Race_ethn) %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
## A SOLUTION
nhanes_data_clean %>%
group_by(Gender, Race_ethn) %>%
summarize(mean_Ft = mean(Ft_ngdL),
max_Ft = max(Ft_ngdL),
min_Ft = min(Ft_ngdL),
n = n())
nhanes_data_clean %>%
group_by(Gender) %>%
select(-Subject, -Age_months, -Resulted_t) %>% #remove other numeric columns
summarize_if(is.numeric, list(mean = mean, med = median))
# your turn!
nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean_TfSat = round(mean(TfSat_pct), 2),
sd_TfSat = round(sd(TfSat_pct),2),
n_TfSat = n()) %>%
arrange(desc(n_TfSat))
nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean = mean(TfSat_pct), sd = sd(TfSat_pct))
## A SOLUTION
nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean_Tfsat = mean(TfSat_pct),
sd_Tfsat = sd(TfSat_pct),
n = n())
nhanes_data_clean <- nhanes_data_clean %>%
mutate(MCV_fL = as.numeric(MCV_fL)) # did you see the warning? NAs introduced by coercion
head(is.na(nhanes_data_clean$MCV_fL)) # provides a logical of if every observation is NA or not.
# count how many NAs are in a data set
sum(is.na(nhanes_data_clean$MCV_fL)) # works because TRUE = 1
# we can combine the which function to find out which observation(s) contain NAs
which(is.na(nhanes_data_clean$MCV_fL)) # what is the output here?
nhanes_data_clean[63, "MCV_fL"] # here it is
nhanes_data[63, "MCV_fL"] # quick way to identify the MCV_fL value in the 63rd row. What happened here???
nhanes_data_clean <-
nhanes_data_clean %>%
replace_na(list(MCV_fL = 80))
nhanes_data_clean[63, "MCV_fL"] # check
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
nhanes_data <- read_csv("data/NHANES_FeMarkers_messy.csv")
nhanes_data_clean <- mutate(nhanes_data,
Gender = factor(Gender),
Race_ethn = factor(Race_ethn))
#we can change more than one column in a single mutate() call
glimpse(nhanes_data_clean) #fct = factor!
summary(nhanes_data_clean) #look what the summary does now for factors
nhanes_data_clean <- nhanes_data_clean %>%
mutate(MCV_fL = as.numeric(MCV_fL)) # did you see the warning? NAs introduced by coercion
nhanes_data_clean <-
nhanes_data_clean %>%
replace_na(list(MCV_fL = 80))
nhanes_data_clean[63, "MCV_fL"] # check
glimpse(nhanes_data_clean)
# may need to install lubridate first
#install.packages("lubridate")
library(lubridate)
nhanes_data_clean <- nhanes_data_clean %>%
mutate(Time_finished = as_datetime(Resulted_t)) #create new column with date-time
glimpse(nhanes_data_clean) #see the difference in Resulted_t and Time_finished?
nhanes_data_clean <- nhanes_data_clean %>%
mutate(testing_TAT = difftime(Time_finished,
Collected_t,
units = "mins"))
View(nhanes_data_clean)
class(nhanes_data_clean$testing_TAT) #notice this is not numeric
ggplot(nhanes_data_clean, aes(x = testing_TAT)) +
geom_histogram(binwidth = 10) # notice the warning
ggplot(nhanes_data_clean, aes(x = as.numeric(testing_TAT))) +
geom_histogram(binwidth = 10) # no difftime object warning
# Do the numbers of samples collected change over the week?
ggplot(nhanes_data_clean,
aes(x = wday(Collected_t, label = TRUE))) +
geom_bar() +
labs(x = "Day of Week", y = "Subjects Collected") # make labels more informative
now <- "2020-10-26 08:24:05"
class(now) # character, want date
now_dt <- ymd_hms(now)
class(now_dt)
then <- "01-05-2010 09:12"
then_dt <- mdy_hm(then, tz = "America/New_York")
when <- "5 Jan, 2010"
when_dt <- dmy(when)
also <- 010510 # as a number
also_dt <- mdy(also)
# your turn!
nhanes_data_clean <- nhanes_data_clean %>%
mutate(day_collected = day(Collected_t))
View(nhanes_data_clean)
ggplot(nhanes_data_clean,
aes(x = factor(day_collected), y = testing_TAT)) +
geom_boxplot() +
labs(x = "Day of Month Collected", y = "Testing TAT (min)")
c("NU Pathology ", "Learn R!")
str_c("NU Pathology ", "Learn R!") #default sep = "" (no space)
str_c("NU Pathology ", "Learn R!", sep = "-") #default sep = "" (no space)
str_c("There are", nrow(nhanes_data), "cases in this data set.", sep = " ")
View(nhanes_data_clean)
collect_loc <- c("LC-PICU", "LC-NICU", "LC-ER", "NM-ER", "NM-CICU")
str_split(collect_loc, "-") # what is the output here? list of character vectors
# if you want a vector output, have to use unlist()
str_split(collect_loc, "-") %>% unlist()
# can also get out a matrix, which may be better here
str_split(collect_loc, "-", simplify = TRUE) # what is the output here? character matrix
nhanes_data_clean <-
nhanes_data_clean %>%
mutate(collect_site =
factor(str_split(Collected_loc, "-",
simplify = TRUE)[ ,2]),
collect_type =
factor(str_split(Collected_loc, "-",
simplify = TRUE)[ ,1]))
View(nhanes_data_clean)
collect_loc <- c("LC-PICU", "LC-NICU", "LC-ER", "NM-ER", "NM-CICU")
str_replace(collect_loc, "LC", "Lurie") #wow!
hba1c <- c("7.3", ">14.0", "6.4%+", "8.0%", ">14.0%", "9.0%+", "8.5%", "10.2", "9.0%", "9.5 %+", "8.9%", "11.2% +", "11.4", "13.2", ">14.0", "7.9%", "10.2%", "8.0", "5.3", "5.0", "8.7%+", "7.7%+", "7.0%+", "5.1", "7.3")
str_extract(hba1c, "[[:digit:]]+\\.*[[:digit:]]") # better, but not yet numeric
as.numeric(str_extract(hba1c, "[[:digit:]]+\\.*[[:digit:]]")) # yes!
nhanes_data_clean <-
nhanes_data_clean %>%
mutate(collect_type_sub =
factor(str_sub(Collected_loc, 1, 3)), # select 1st-3rd characters
collect_site_sub =
factor(str_sub(Collected_loc, -1))) #select the last character
glimpse(nhanes_data_clean)
length(nhanes_data_clean)
length("NU Pathology Learn R! Session 4")
str_length("NU Pathology Learn R! Session 4")
name_up <- str_to_upper(name)
# your turn!
name <- "Shannon Haymond"
name_up <- str_to_upper(name)
name_low <- str_to_lower(name_up)
name_split <- str_split(name_low, " ")
name_split <- str_split(name_low, " ") %>% unlist()
name_sub_f <- str_sub(name_split[1], 1, 1)
name_sub_l <- str_sub(name_split[2], 1, 4)
name_sub <- str_c(name_sub_f, name_sub_l)
# convert Consented to a factor variable
nhanes_data_clean <-
nhanes_data_clean %>%
mutate(Consented = factor(Consented))
# determine the levels and count for each
levels(nhanes_data_clean$Consented)
fct_count(nhanes_data_clean$Consented)
nhanes_data_clean <-
nhanes_data_clean %>%
mutate(Consented = fct_collapse(Consented, "Y" = c("Yes", "YES")))
fct_count(nhanes_data_clean$Consented) # success!
# notice recode syntax is new name = old name
nhanes_data_clean <- nhanes_data_clean %>%
mutate(Race_ethn = fct_recode(Race_ethn,
"Mexican American" = '1',
"Other Hispanic" = '2',
"Non-Hispanic White" = '3',
"Non-Hispanic Black" = '4',
"Other Race - Including Multi-Racial" = '5'))
ggplot(nhanes_data_clean, aes(x = fct_infreq(Race_ethn))) +
geom_bar(aes(fill = Gender), position = "dodge") +
labs(x = "") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1, vjust = 0.5))
ggplot(nhanes_data_clean, aes(x = Race_ethn)) +
geom_bar(aes(fill = Gender), position = "dodge") +
labs(x = "") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1, vjust = 0.5))
ggplot(nhanes_data_clean, aes(x = fct_infreq(Race_ethn))) +
geom_bar(aes(fill = Gender), position = "dodge") +
labs(x = "") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1, vjust = 0.5))
ggplot(nhanes_data_clean, aes(x = fct_rev(fct_infreq(Race_ethn)))) +
geom_bar(aes(fill = Gender), position = "dodge") +
labs(x = "") +
theme_bw() +
coord_flip()
ggplot(nhanes_data_clean, aes(x = fct_infreq(Race_ethn))) +
geom_bar(aes(fill = Gender), position = "dodge") +
labs(x = "") +
theme_bw() +
coord_flip()
ggplot(nhanes_data_clean, aes(x = fct_rev(fct_infreq(Race_ethn)))) +
geom_bar(aes(fill = Gender), position = "dodge") +
labs(x = "") +
theme_bw() +
coord_flip()
nhanes_age_summary <- nhanes_data_clean %>%
group_by(Race_ethn) %>%
summarize(mean_age_months = mean(Age_months, na.rm = TRUE),
n = n())
ggplot(nhanes_age_summary,
aes(mean_age_months,
Race_ethn)) +
geom_point()
# now reorder Race_ethn by the mean age
ggplot(nhanes_age_summary,
aes(mean_age_months,
fct_reorder(Race_ethn, mean_age_months))) +
geom_point()
fct_count(nhanes_data_clean$Race_ethn)
nhanes_data_clean <- nhanes_data_clean %>%
mutate(Gender = recode(Gender,
"Male" = '1', "Female" = '2'))
View(nhanes_data_clean)
## A SOLUTION
fct_count(nhanes_data_clean$Race_ethn)
nhanes_data_clean <- nhanes_data_clean %>%
mutate(Gender = recode(Gender,
"Male" = '1', "Female" = '2'))
View(nhanes_data_clean)
nhanes_data_clean <- nhanes_data_clean %>%
mutate(Gender = recode(Gender,
"Male" = '1', "Female" = '2'))
View(nhanes_data_clean)
nhanes_data_clean <- nhanes_data_clean %>%
mutate(Gender = fct_recode(Gender,
"Male" = '1', "Female" = '2'))
View(nhanes_data_clean)
