knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(dev='png', fig.align = 'center', fig.height = 4, fig.width = 6)
#knitr::opts_chunk$set(class.source='fold-show')
library(tidyverse)
my_own_data <- read.csv("data/NHANES_FeMarkers_3to5y.csv")
summary(my_own_data)
my_numbers <- c(5, 10, 15)
my_numbers
my_numbers + 3
my_numbers*2
my_numbers*my_numbers
length(my_numbers)
types <- c("numeric", "integer", "character", "factor", "logical", "complex", "date-time")
examples <- c("-0.2, 1, 56.890", "1, 34, 100", "'Hello there', 'Yes', '1', 'TRUE'", "'Yes', 'No', '1', '2'", "TRUE, FALSE", "1+3i, 0+1i", "2017-09-01, 07/04/1980, 2013-07-24 23:55:26")
uses <- c("math", "math", "notes, text, names", "categorization", "logic statements", "complex math", "dates and times")
types_tbl <- data.frame(types, examples, uses)
knitr::kable(types_tbl, col.names = c("Data Type", "Examples", "Uses"))
my_list_named <- list(word = 'letters',
numbers = list(1, 2, 3),
logical = TRUE,
a_list = list("more letters", 4, 5, FALSE))
my_list_named
unlist(my_list_named)
unlist_my_names <- unlist(my_list_named)
unlist_my_names
unlist_my_names[1]
unlist_my_names[[1]
unlist_my_names[[1]
unlist_my_names[[1]]
nhanes_fe <- read.csv("data/NHANES_FeMarkers_3to5y.csv")
summary(nhanes_fe)
View(nhanes_fe)
reg <- lm(Ft_ngdL ~ Fe_ugdL, data = nhanes_fe)
summary(reg)
reg$coefficients
# we can even get more specific and pull out the intercept and the slope to use them in math
reg$coefficients[1]
write.csv(nhanes_fe, "Data_Files/Results/learnR_data.csv")
dir.create("results")
dir.create("data/results")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
10.mean <- mean(rnorm(10))
loc <- c("main", "WST", "NLX", "CD")
loc <- c("main", "WST", "NLX", "CD", "GLB")
loc <- c("main", "WST", "NLX", "CD")
loc <- c(loc, "GLB")
install.packages(lubridate)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
summary(diamonds)
dia <- diamonds
View(dia)
qplot(x = carat, y = price, data = diamonds) # by default if x and y supplied - will plot scatterplot (as geom = "point"), can use geom argument to change plot type.
qplot(x = carat, y = price, data = diamonds, geom = c("point","smooth"))
qplot(x = price, data = diamonds)
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = clarity), alpha = 0.6)
class(diamonds$cut)
levels(diamonds$cut)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 0.6)
glimpse(diamonds)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
facet_grid(~clarity)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
facet_wrap(~clarity, scales = "free")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(dev='png', fig.align = 'center', fig.height = 4, fig.width = 6)
#knitr::opts_chunk$set(class.source='fold-show')
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(dev='png', fig.align = 'center', fig.height = 4, fig.width = 6)
#knitr::opts_chunk$set(class.source='fold-show')
library(tidyverse)
data()
my_data <- mtcars
View(my_data)
View(my_data)
head(my_data) # head shows first 6 rows of data by default
head(my_data, 10) # now will show 10 rows
tail(my_data) # tail shows last 6 rows of data
View(my_data)
data(package = .packages(all.available = TRUE))
# let's use the very popular diamonds data set from gglplot2
my_next_data <- diamonds
head(my_next_data)
# your turn!
data()
my_set <- DNase
View(my_set)
head(my_set, 3)
tail(my_set, 3)
nhanes_fe <- read.csv("data/NHANES_FeMarkers_3to5y.csv")
View(nhanes_fe)
summary(nhanes_fe)
my_numbers <- c(5, 10, 15)
my_numbers + 3
my_numbers*2
my_numbers*my_numbers
length(my_numbers)
# your turn!
# hint: remember to use "" for text/character objects
my_vector <- c("one", "two", "three", "four")
length(my_vector)
types <- c("numeric", "integer", "character", "factor", "logical", "complex", "date-time")
examples <- c("-0.2, 1, 56.890", "1, 34, 100", "'Hello there', 'Yes', '1', 'TRUE'", "'Yes', 'No', '1', '2'", "TRUE, FALSE", "1+3i, 0+1i", "2017-09-01, 07/04/1980, 2013-07-24 23:55:26")
uses <- c("math", "math", "notes, text, names", "categorization", "logic statements", "complex math", "dates and times")
types_tbl <- data.frame(types, examples, uses)
knitr::kable(types_tbl, col.names = c("Data Type", "Examples", "Uses"))
# your turn!
mixed_vector <- c(6, "times", TRUE)
class(mixed_vector)
HbA1c <- c(">14", 8.7, 5, 6.3, 7.1, "Test Cancelled") # create our vector of values
mean(HbA1c, na.rm = TRUE) # calculate the mean of the numeric values
class(HbA1c)
HbA1c
TRUE + 5
FALSE + 5
HbA1c_num <- as.numeric(HbA1c) #did you get a warning?
class(HbA1c_num)
HbA1c_num
mean(HbA1c_num, na.rm = TRUE)
mean(HbA1c_num)
mean(HbA1c_num, na.rm = TRUE)
my_list <- list('letters', 1, 2, 3, TRUE, list("more letters", 4, 5, FALSE))
my_list_named <- list(word = 'letters',
numbers = list(1, 2, 3),
logical = TRUE,
a_list = list("more letters", 4, 5, FALSE))
my_list_named
my_faves <- list(Names = c("Shannon", "Michael", "KL"),
Color = c("blue", "blue", "green"),
Number = c(6, 7, 2),
Fun = c(TRUE, TRUE, TRUE))
# create OLS linear regression model for ferritin and iron values from the NHANES iron marker data set
reg <- lm(Ft_ngdL ~ Fe_ugdL, data = nhanes_fe)
summary(reg)
# if we want to inspect the coefficients for the linear equation
reg$coefficients
# we can even get more specific and pull out the intercept and the slope to use them in math operations or other things
reg$coefficients[1] #gets the intercept
reg$coefficients[2] #gets the slope
my_df <- data.frame(numbers = c(1, 2, 3, 4),
letters = c("A","B","C", "D"),
logics = c(FALSE, TRUE, FALSE, FALSE))
View(my_df)
names(my_df)
dim(my_df)
nrow(my_df)
ncol(my_df)
our_faves_df <- data.frame(Name = c("Shannon", "Michael", "KL"),
Color = c("blue", "blue", "green"),
Number = c(6, 7, 2),
Fun = c(TRUE, TRUE, TRUE))
View(our_faves_df)
name <- c("Shannon", "Michael", "KL")
color <- c("blue", "blue", "green")
nums <- c(6, 7, 2)
fun <- c(TRUE, TRUE, TRUE)
faves <- data.frame(Name = name,
Color = color,
Number = nums,
Fun = fun)
View(faves)
faves <- data.frame(name,
color,
nums,
fun)
View(faves)
faves <- colnames(c("Name", "Color", "Number", "Fun"))
faves <- colnames(faves, c("Name", "Color", "Number", "Fun"))
colnames(faves, c("Name", "Color", "Number", "Fun"))
colnames(faves, "Name", "Color", "Number", "Fun")
faves <- data.frame(name,
color,
nums,
fun)
View(faves)
colnames(faves) <- c("Name", "Color", "Number", "Fun")
View(faves)
dir.create("data/results") #remember from previous session - use to create a new folder
dir.create("data/results") #remember from previous session - use to create a new folder
write.csv(our_faves, "data/results/learnR_data.csv")
write.csv(faves, "data/results/learnR_data.csv")
write.csv(faves, "data/results/learnR_data.csv", row.names = FALSE)
getwd()
